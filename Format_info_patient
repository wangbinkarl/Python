#!/usr/bin/env python
# -*- encoding:utf-8 -*-
# Purpose:  使用Pandas 格式化输入文件，并将输入输出均输出到同个excel表
# Author: Wangb
# Note:
# Last updated on: 20- -
import pandas as pd
import numpy as np
import sys
#设置编码
if sys.getdefaultencoding() != 'utf-8':
    reload(sys)
    sys.setdefaultencoding('utf-8')

def format_m(df):
	df_a_1 = df.loc[:,'id':'AF']
	#df_a_1 = df_a_1.reset_index(drop=True)                                  #index重置
	col_id1 = df_a_1['id']
	sid1 = np.unique(col_id1.values)[0]                                     #取出某列值，去重
	df_a_1.rename(columns={'AF':sid1}, inplace = True)                      #重命名
	df_a_1.rename(columns={'Gene.ID':'Gene_ID'}, inplace = True)
	df_a_1['NM_ID'] = df_a_1.Gene_ID.apply(lambda x: x.split(':')[1])       #切割列的值生成新列
	df_a_1['Exon'] = df_a_1.Gene_ID.apply(lambda x: x.split(':')[2])
	df_a_1['c_'] = df_a_1.AAChange.apply(lambda x: x.split('(')[0] if x.count('(') == 1 else x)
	df_a_1['p_'] = df_a_1.AAChange.apply(lambda x: x.split('(')[1].split(')')[0] if x.count('(') == 1 else '.')
	del df_a_1['Gene_ID']                                                   #删除该列
	del df_a_1['AAChange']
	return df_a_1

def format_c(df,sid):
	df.rename(columns={'copynumber':sid}, inplace = True)
	df_1 = df[['Type','Gene',sid]]
	return df_1

csvfile = sys.argv[1]
df_a = pd.read_csv(csvfile,sep='\t')
df_a_0 = df_a.loc[df_a['Type']=='Mutant']
df_CNV = df_a.loc[df_a['Type']=='CNV']

col_id0 = df_a_0['id']
sid0 = np.unique(col_id0.values)
col_list = ['Type','Gene','Chr.start','Chr.end','Ref','Alt',
 'ExonicFunc','rsID','NM_ID','Exon','c_',
 'p_']
df_tmp = pd.DataFrame(columns=col_list)
#print df_tmp
for i in range(0,len(sid0)):
	df_a_x = df_a_0.loc[df_a_0['id']==sid0[i]] 
	df_a_y = format_m(df_a_x)
	result = pd.merge(df_tmp,df_a_y,on=['Type','Gene','NM_ID','Exon','c_','p_','Chr.start','Chr.end','Ref','Alt','ExonicFunc','rsID'],how='outer')
	df_tmp = result
	#print df_a_y.columns.values

col_id3 = df_CNV['id']
sid3 = np.unique(col_id3.values)
col_c_list = ['Type','Gene']
dfc_tmp = pd.DataFrame(columns=col_c_list)
for j in range(0,len(sid3)):
	df_c = df_CNV.loc[df_CNV['id']==sid3[j]]
	df_c_1 = format_c(df_c,sid3[j])
	result_c = pd.merge(dfc_tmp,df_c_1,on=['Type','Gene'],how='outer')
	dfc_tmp = result_c

#print result_c
result2 = pd.concat([result,result_c],axis=0)				#堆叠列表
result2 = result2.fillna('.')

result2['Hom.Het'] = result2['Hom.Het_x'] + result2['Hom.Het_y']	#合并两列值 ------如分开则需要设置merge参数
result2['Hom.Het'].replace(["hethet","het.",".het",".."],["het","het","het","."],inplace=True)

sidx = list(sid0)+list(sid3)
sidx = list(set(sidx))
sidx.sort(reverse = True)
order_raw = ['Type','Gene','NM_ID','Exon','c_','p_','Chr.start','Chr.end','Ref','Alt','Hom.Het','ExonicFunc','rsID']
order = order_raw+sidx
result2 = result2[order]						#对列名进行排序
#print result2

writer = pd.ExcelWriter('output_1.0.1.beta.xlsx')				#输出多个sheet
df_a.to_excel(writer,"输入格式",index = False)
result2.to_excel(writer,"输出格式",index = False)
writer.save()

